services: 
  user-service:
    container_name: user-app
    build: 
      context: ./user-service
    ports:
      - "5001:5000"
    depends_on:
      - db
      - redis
    env_file:
      - .env
    networks: 
      - app-network
    restart: unless-stopped

  product-service:
    container_name: product-app
    build: ./product-service
    ports:
      - "5002:5000"
    depends_on:
      - db
      - redis
    networks:
      - app-network
    env_file:
      - .env
    restart: unless-stopped

  frontend:
    container_name: frontend
    build: 
      context: ./frontend
    ports: 
      - "3000:80"
    env_file: 
      - ./frontend/.env
    depends_on:
      - user-service
      - product-service
    networks:
      - app-network

  db:
    container_name: db
    image: postgres
    env_file:
      - .env
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes: 
      - db_data:/var/lib/postgresql/data
      - ./db-init/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks: 
      - app-network
      
  postgres-expoerter:
    container_name: postgres-exporter
    image: prometheuscommunity/postgres-exporter
    ports: 
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@db:5432/postgres?sslmode=disable"

    networks: 
      - app-network

  redis:
    container_name: redis
    image: "redis:alpine"
    ports: 
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped

  redis-exporter: 
    container_name: redis-exporter
    image: oliver006/redis_exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
    networks:
      - app-network
    depends_on:
      - redis
    restart: unless-stopped

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network
    restart: unless-stopped

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports: 
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - app-network
    restart: unless-stopped

volumes:
  db_data:
  prometheus_data:

networks:
  app-network:
